import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm
from statsmodels.stats.api import sandwich_covariance as sw

# Parameters
max_lag = 60
vol_lookback = 12
min_obs = 24

# === Core Functions ===

def compute_monthly_returns(df):
    """Convert index levels to monthly returns."""
    monthly_prices = df.resample('M').last()
    return monthly_prices.pct_change().dropna()

def compute_volatility(returns, window):
    """Compute rolling volatility (std) over the given window."""
    return returns.rolling(window=window).std()

def prepare_regression_data(data_dict, lag, vol_lookback):
    """Construct Y_t and X_t-h for all instruments and time."""
    all_data = []

    for asset_class, df in data_dict.items():
        monthly_returns = compute_monthly_returns(df)
        vol = compute_volatility(monthly_returns, vol_lookback)

        # Shifted returns and volatilities
        y = monthly_returns / vol.shift(1)
        x = monthly_returns.shift(lag) / vol.shift(lag + 1)

        valid_idx = y.index.intersection(x.index)
        for col in df.columns:
            temp = pd.DataFrame({
                'y': y[col].loc[valid_idx],
                'x': x[col].loc[valid_idx],
                'time': valid_idx,
                'asset': col
            }).dropna()
            all_data.append(temp)

    return pd.concat(all_data, axis=0).dropna()

def run_clustered_regression(data):
    """Run OLS regression with time-clustered standard errors."""
    X = sm.add_constant(data['x'])
    model = sm.OLS(data['y'], X).fit()
    clusters = data['time']
    cov = sw.cov_cluster(model, clusters)
    t_stat = model.params['x'] / np.sqrt(cov[1, 1])
    return t_stat

# === Plotting Functions ===

def plot_panel_a(t_stats, max_lag):
    """Panel A: T-stats for pooled regression across all asset classes."""
    plt.figure(figsize=(12, 6))
    plt.bar(range(1, max_lag + 1), t_stats)
    plt.axhline(y=2, color='red', linestyle='--', label='t = ±2')
    plt.axhline(y=-2, color='red', linestyle='--')
    plt.xlabel("Lag h (Months)")
    plt.ylabel("t-statistic")
    plt.title("Panel A: Scaled Return Predictor (Pooled Across All Asset Classes)")
    plt.legend()
    plt.tight_layout()
    plt.show()

def compute_panel_c(data_dict, max_lag, vol_lookback):
    """Compute Panel C style t-stats per asset class."""
    panel_c_results = {}

    for asset_class, df in data_dict.items():
        t_stats = []
        for h in range(1, max_lag + 1):
            temp_data_dict = {asset_class: df}
            reg_data = prepare_regression_data(temp_data_dict, lag=h, vol_lookback=vol_lookback)
            if len(reg_data) >= min_obs:
                t_stat = run_clustered_regression(reg_data)
                t_stats.append(t_stat)
            else:
                t_stats.append(np.nan)
        panel_c_results[asset_class] = t_stats

    return panel_c_results

def plot_panel_c(panel_c_results, max_lag):
    """Panel C: Plot t-stats per asset class."""
    num_classes = len(panel_c_results)
    plt.figure(figsize=(14, 4 * num_classes))

    for idx, (asset_class, t_stats) in enumerate(panel_c_results.items(), 1):
        plt.subplot(num_classes, 1, idx)
        plt.bar(range(1, max_lag + 1), t_stats)
        plt.axhline(y=2, color='red', linestyle='--', label='t = ±2')
        plt.axhline(y=-2, color='red', linestyle='--')
        plt.title(f"Panel C: Scaled Return Predictor – {asset_class}")
        plt.xlabel("Lag h (Months)")
        plt.ylabel("t-statistic")
        plt.legend()

    plt.tight_layout()
    plt.show()

# === Example Execution ===

# Make sure to define `data_dict` before running the following:

# Compute Panel A
# pooled_t_stats = []
# for h in range(1, max_lag + 1):
#     reg_data = prepare_regression_data(data_dict, lag=h, vol_lookback=vol_lookback)
#     if len(reg_data) >= min_obs:
#         t_stat = run_clustered_regression(reg_data)
#         pooled_t_stats.append(t_stat)
#     else:
#         pooled_t_stats.append(np.nan)
# plot_panel_a(pooled_t_stats, max_lag)

# Compute and Plot Panel C
# panel_c_stats = compute_panel_c(data_dict, max_lag, vol_lookback)
# plot_panel_c(panel_c_stats, max_lag)



# Panel A
pooled_t_stats = []
for h in range(1, max_lag + 1):
    reg_data = prepare_regression_data(data_dict, lag=h, vol_lookback=vol_lookback)
    if len(reg_data) >= min_obs:
        t_stat = run_clustered_regression(reg_data)
        pooled_t_stats.append(t_stat)
    else:
        pooled_t_stats.append(np.nan)
plot_panel_a(pooled_t_stats, max_lag)

# Panel C
panel_c_stats = compute_panel_c(data_dict, max_lag, vol_lookback)
plot_panel_c(panel_c_stats, max_lag)
